name: Builder

on:
  push:
    branches: ["master"]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - run: npm ci
    - run: npm run build

    - name: Get version from package.json
      id: get_package_version
      run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

    - name: Split Package Version
      id: split_version
      run: |
        PACKAGE_MAJOR_MINOR_PATCH=$(echo ${{ env.PACKAGE_VERSION }} | cut -d'-' -f1)
        echo "PACKAGE_MAJOR_MINOR_PATCH=$PACKAGE_MAJOR_MINOR_PATCH" >> $GITHUB_ENV
        
    - name: Find latest release tag
      id: find_latest_release
      uses: actions/github-script@v4
      with:
        script: |
          const packageMajorMinorPatch = process.env.PACKAGE_MAJOR_MINOR_PATCH.replace('v', '');
          const { data: releases } = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          const latestRelease = releases.find(release => 
            release.tag_name.startsWith('v') && 
            release.tag_name.replace('v', '').split('-')[0] === packageMajorMinorPatch
          );
          let latestVersionWithoutPrefix, newVersion;

          if (latestRelease) {
            latestVersionWithoutPrefix = latestRelease.tag_name.replace('v', '').split('-');
            let latestMajorMinorPatch = latestVersionWithoutPrefix[0];
            let latestSuffix = latestVersionWithoutPrefix.length > 1 ? latestVersionWithoutPrefix[1] : null;

            // Compare versions
            if (latestMajorMinorPatch !== packageMajorMinorPatch) {
              // If major/minor/patch differs, use package version directly
              newVersion = `v${process.env.PACKAGE_VERSION}`;
            } else {
              // Increment suffix when major/minor/patch is the same
              let nextSuffix = parseInt(latestSuffix || 0) + 1;
              newVersion = `v${latestMajorMinorPatch}-${nextSuffix}`;
            }
          } else {
            // If there's no release yet or major/minor/patch differs, use package version directly
            newVersion = `v${packageMajorMinorPatch}`;
          }

          core.setOutput('new_version', newVersion);

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.find_latest_release.outputs.new_version }}
        release_name: ${{ steps.find_latest_release.outputs.new_version }}
        draft: false
        prerelease: false

    - name: Get project name
      id: get_project_name
      run: |
        PROJECT_NAME=$(node -p "require('./package.json').name")
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

    - name: Upload Release Asset
      id: upload_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/${{ env.PROJECT_NAME }}.js
        asset_name: ${{ env.PROJECT_NAME }}.js
        asset_content_type: application/javascript

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Prepare Docker Tag
      id: prepare_docker_tag
      run: |
        echo "DOCKER_TAG=$(echo ${{ steps.find_latest_release.outputs.new_version }} | sed 's/^v//')" >> $GITHUB_ENV
        echo "DOCKER_LATEST_TAG=latest" >> $GITHUB_ENV

    - name: Build Docker Image
      id: build-image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:${{ env.DOCKER_TAG }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:${{ env.DOCKER_LATEST_TAG }}
        labels: org.opencontainers.image.source=https://github.com/${{ github.repository }}